# Local filesystem mounting			-*- shell-script -*-
# shellcheck shell=sh

# Load DEBUG_MODE from configuration
DEBUG_MODE="no" # Default value
CONFIG_FILE="/conf/zramroot-config"
if [ -f "${CONFIG_FILE}" ]; then
    # Extract DEBUG_MODE value safely
    debug_setting=$(grep "^DEBUG_MODE=" "${CONFIG_FILE}" | cut -d'"' -f2)
    if [ "${debug_setting}" = "yes" ]; then
        DEBUG_MODE="yes"
    fi
fi

# --- Enhanced Logging Functions ---
# Variables for physical root logging
REAL_ROOT_MNT="/mnt/real_root_rw"
DATE_TIME=$(date '+%Y%m%d-%H%M%S' 2>/dev/null || echo "unknown") 
REAL_ROOT_LOG_FILE="${REAL_ROOT_MNT}/var/log/zramroot-local-${DATE_TIME}.log"

# Function to ensure physical root is mounted for logging
ensure_physical_root_mounted() {
    # Only attempt if not already mounted and we're in zramroot mode
    if [ ! -d "${REAL_ROOT_MNT}" ] || ! mountpoint -q "${REAL_ROOT_MNT}"; then
        if echo " $(cat /proc/cmdline) " | grep -q "[[:space:]]zramroot[[:space:]]"; then
            mkdir -p "${REAL_ROOT_MNT}"
            
            # Try to get the original root device from environment or cmdline
            local orig_root="${ROOT}"
            if [ -z "$orig_root" ]; then
                # Extract from kernel command line
                orig_root=$(cat /proc/cmdline | grep -oE 'root=[^[:space:]]+' | cut -d'=' -f2)
            fi
            
            if [ -n "$orig_root" ]; then
                # Resolve the device if it's UUID/LABEL format
                local real_dev=""
                if echo "${orig_root}" | grep -q "^UUID=\|^LABEL="; then
                    if command -v blkid >/dev/null 2>&1; then
                        real_dev=$(blkid -l -t "${orig_root}" -o device 2>/dev/null)
                    fi
                elif [ "${orig_root#/dev/}" != "${orig_root}" ] && [ -b "${orig_root}" ]; then
                    real_dev="${orig_root}"
                fi
                
                # Try to mount the physical root
                if [ -n "$real_dev" ] && [ -b "$real_dev" ]; then
                    if mount -o rw "$real_dev" "${REAL_ROOT_MNT}" 2>/dev/null; then
                        mkdir -p "${REAL_ROOT_MNT}/var/log"
                        touch "${REAL_ROOT_LOG_FILE}" 2>/dev/null || true
                    fi
                fi
            fi
        fi
    fi
}

# Logs to the physical root log file if available
zram_log() {
    local MSG="$@"
    
    # Always log to kernel
    echo "zramroot: $MSG" > /dev/kmsg 2>/dev/null || true
    
    # Log to console if not quiet
    if [ "${quiet}" != "y" ]; then
        echo "zramroot: $MSG" > /dev/console 2>/dev/null || true
    fi
    
    # Only log to file if DEBUG_MODE=yes or this is an error message
    if [ "${DEBUG_MODE}" = "yes" ] || echo "$MSG" | grep -q "ERROR"; then
        # Ensure physical root is mounted for logging
        ensure_physical_root_mounted
        
        if [ -w "${REAL_ROOT_LOG_FILE}" ]; then
            now=""
            if command -v date >/dev/null 2>&1; then
                now="$(date '+%Y-%m-%d %H:%M:%S')"
            fi
            echo "${now} LOCAL-SCRIPT: $MSG" >> "${REAL_ROOT_LOG_FILE}"
        elif [ "${DEBUG_MODE}" = "yes" ]; then
            # If we can't write to log file but debug is on, try to create it
            ensure_physical_root_mounted
        fi
    fi
}

# --- Safe Sync Function ---
safe_sync() {
    local timeout=${1:-5}  # Default 5 second timeout for less critical syncs
    local desc=${2:-"filesystem"}
    
    zram_log "Starting safe sync for $desc (timeout: ${timeout}s)"
    
    # Use timeout command if available
    if command -v timeout >/dev/null 2>&1; then
        if timeout $timeout sync; then
            zram_log "Sync completed successfully"
            return 0
        else
            zram_log "Sync timed out after ${timeout} seconds"
            return 1
        fi
    else
        # Fallback: start sync in background and monitor
        sync &
        local sync_pid=$!
        local count=0
        
        while [ $count -lt $timeout ]; do
            if ! kill -0 $sync_pid 2>/dev/null; then
                wait $sync_pid
                local exit_code=$?
                zram_log "Sync completed (exit code: $exit_code)"
                return $exit_code
            fi
            sleep 1
            count=$((count + 1))
        done
        
        # Timeout reached
        zram_log "Sync timed out after ${timeout} seconds, killing sync process"
        kill -9 $sync_pid 2>/dev/null
        return 1
    fi
}

local_top()
{
	if [ "${local_top_used}" != "yes" ]; then
		[ "${quiet?}" != "y" ] && log_begin_msg "Running /scripts/local-top"
		run_scripts /scripts/local-top
		[ "$quiet" != "y" ] && log_end_msg
	fi
	local_top_used=yes
}

local_block()
{
	[ "${quiet?}" != "y" ] && log_begin_msg "Running /scripts/local-block"
	run_scripts /scripts/local-block "$@"
	[ "$quiet" != "y" ] && log_end_msg
}

local_premount()
{
	if [ "${local_premount_used}" != "yes" ]; then
		[ "${quiet?}" != "y" ] && log_begin_msg "Running /scripts/local-premount"
		run_scripts /scripts/local-premount
		[ "$quiet" != "y" ] && log_end_msg
	fi
	local_premount_used=yes
}

local_bottom()
{
	if [ "${local_premount_used}" = "yes" ] || [ "${local_top_used}" = "yes" ]; then
		[ "${quiet?}" != "y" ] && log_begin_msg "Running /scripts/local-bottom"
		run_scripts /scripts/local-bottom
		[ "$quiet" != "y" ] && log_end_msg
	fi
	local_premount_used=no
	local_top_used=no
}

# $1=device ID to mount
# $2=optionname (for root and etc)
# $3=panic if device is missing (true or false, default: true)
# Sets $DEV to the resolved device node
local_device_setup()
{
	local dev_id="$1"
	local name="$2"
	local may_panic="${3:-true}"
	local real_dev
	local time_elapsed
	local count

	# If wait-for-root understands this prefix, then use it to wait for
	# the device rather than settling the whole of udev.

	# Timeout is max(30, rootdelay) seconds (approximately)
	local slumber=30
	case $DPKG_ARCH in
		powerpc|ppc64|ppc64el)
			slumber=180
			;;
		*)
			slumber=30
			;;
	esac
	if [ "${ROOTDELAY:-0}" -gt $slumber ]; then
		slumber=$ROOTDELAY
	fi

	case "$dev_id" in
	UUID=*|LABEL=*|PARTUUID=*|/dev/*)
		FSTYPE=$( wait-for-root "$dev_id" "$slumber" )
		;;
	*)
		wait_for_udev 10
		;;
	esac

	# Load ubi with the correct MTD partition and return since fstype
	# doesn't work with a char device like ubi.
	if [ -n "$UBIMTD" ]; then
		/sbin/modprobe ubi "mtd=$UBIMTD"
		DEV="${dev_id}"
		return
	fi

	# Don't wait for a device that doesn't have a corresponding
	# device in /dev and isn't resolvable by blkid (e.g. mtd0)
	if [ "${dev_id#/dev}" = "${dev_id}" ] &&
	   [ "${dev_id#*=}" = "${dev_id}" ]; then
		DEV="${dev_id}"
		return
	fi

	# If the root device hasn't shown up yet, give it a little while
	# to allow for asynchronous device discovery (e.g. USB).  We
	# also need to keep invoking the local-block scripts in case
	# there are devices stacked on top of those.
	#
	# in Ubuntu, we should never actually enter this loop as wait-for-root
	# above should have waited until the device appeared.
	if ! real_dev=$(resolve_device "${dev_id}") ||
	   ! get_fstype "${real_dev}" >/dev/null; then
		log_begin_msg "Waiting for ${name}"

		while true; do
			sleep 1
			time_elapsed="$(time_elapsed)"

			local_block "${dev_id}"

			# If mdadm's local-block script counts the
			# number of times it is run, make sure to
			# run it the expected number of times.
			mdadm_exec=0
			while true; do
				if [ -f /run/count.mdadm.initrd ]; then
					count="$(cat /run/count.mdadm.initrd)"
				elif [ -n "${count}" ]; then
					# mdadm script deleted it; put it back
					count=$((count + 1))
					echo "${count}" >/run/count.mdadm.initrd
				else
					break
				fi
				if [ "${count}" -ge "${time_elapsed}" ]; then
					break;
				fi

				# Track that mdadm was executed to force
				# cryptroot execution after the loop, see
				# LP #1879980.
				mdadm_exec=1
				/scripts/local-block/mdadm "${dev_id}"

				# Cryptroot must run here, see LP #1879980.
				# The counter is inc/dec on cryptroot script!
				if [ -f /run/cryptroot.initrd.cnt ]; then
					crypt_cnt=$(cat /run/cryptroot.initrd.cnt)
					if [ "${crypt_cnt}" -gt 0 ]; then
						/scripts/local-block/cryptroot "${dev_id}"
					fi
				fi
			done

			# Extra cryptroot run after mdadm loop in order to
			# start encrypted volumes on top of RAID arrays.
			if [ -f /run/cryptroot.initrd.cnt ]; then
				crypt_cnt=$(cat /run/cryptroot.initrd.cnt)
				if [ "${crypt_cnt}" -gt 0 ] || [ ${mdadm_exec} -ne 0 ]; then
					/scripts/local-block/cryptroot "${dev_id}"
				fi
			fi

			if real_dev=$(resolve_device "${dev_id}") &&
			   get_fstype "${real_dev}" >/dev/null; then
				wait_for_udev 10
				log_end_msg 0
				break
			fi
			if [ "${time_elapsed}" -ge "${slumber}" ]; then
				log_end_msg 1 || true
				break
			fi
		done
	fi

	# We've given up, but we'll let the user fix matters if they can
	while ! real_dev=$(resolve_device "${dev_id}") ||
	      ! get_fstype "${real_dev}" >/dev/null; do
		if ! $may_panic; then
			echo "Gave up waiting for ${name}"
			return 1
		fi
		echo "Gave up waiting for ${name} device.  Common problems:"
		echo " - Boot args (cat /proc/cmdline)"
		echo "   - Check rootdelay= (did the system wait long enough?)"
		if [ "${name}" = root ]; then
			echo "   - Check root= (did the system wait for the right device?)"
		fi
		echo " - Missing modules (cat /proc/modules; ls /dev)"
		panic "ALERT!  ${dev_id} does not exist.  Dropping to a shell!"
	done

	DEV="${real_dev}"
}

local_mount_root()
{
    # Check if zramroot parameter exists
    if echo " $(cat /proc/cmdline) " | grep -q "[[:space:]]zramroot[[:space:]]"; then
        # --- ZRAM Root Path ---
        log_begin_msg "Detected zramroot parameter, attempting ZRAM mount"
        zram_log "ZRAM root mount process starting"
        
        # Ensure the premount scripts have run
        if [ "${local_premount_used}" != "yes" ]; then
            zram_log "Running local_premount scripts first"
            local_premount
        else
            zram_log "local_premount already executed"
        fi

        # Try to source variables from the file
        if [ -f "/conf/zramroot_vars" ]; then
            zram_log "Sourcing variables from /conf/zramroot_vars"
            . /conf/zramroot_vars
        elif [ -f "/tmp/zramroot_vars" ]; then
            zram_log "Sourcing variables from /tmp/zramroot_vars"
            . /tmp/zramroot_vars
        fi

        # Check for zramroot-boot script variables
        if [ -z "${ZRAMROOT_DEVICE}" ] || [ -z "${ZRAMROOT_FSTYPE}" ] || [ -z "${ZRAMROOT_ROOTFLAGS}" ]; then
            zram_log "ERROR: Required ZRAM variables not available"
            # Auto-detect as fallback
            if [ -b "/dev/zram0" ]; then
                zram_log "Auto-detected ZRAM device: /dev/zram0"
                ZRAMROOT_DEVICE="/dev/zram0"
                ZRAMROOT_FSTYPE="ext4"
                ZRAMROOT_ROOTFLAGS="rw,noatime"
            else
                panic "ZRAMROOT Error: No ZRAM device found!"
            fi
        fi

        zram_log "Using ZRAM device: ${ZRAMROOT_DEVICE}"
        zram_log "Using ZRAM FSTYPE: ${ZRAMROOT_FSTYPE}"
        zram_log "Using ZRAM ROOTFLAGS: ${ZRAMROOT_ROOTFLAGS}"

        # Set variables for mounting ZRAM root
        ROOT="${ZRAMROOT_DEVICE}"
        FSTYPE="${ZRAMROOT_FSTYPE}"
        ROOTFLAGS="${ZRAMROOT_ROOTFLAGS}"
        roflag="-w"  # ZRAM should always be mounted read-write

        # Run local_top scripts
        zram_log "Running local_top scripts"
        local_top

        # Skip filesystem check for ZRAM device
        zram_log "Skipping filesystem check for ZRAM device ${ROOT}"

        # Make sure rootmnt exists
        mkdir -p "${rootmnt}"
        
        # Mount ZRAM root directly
        zram_log "Mounting ZRAM root ${ROOT} on ${rootmnt}"
        
        # Try mounting with different option formats
        if ! mount ${roflag} -t "${FSTYPE}" -o "${ROOTFLAGS}" "${ROOT}" "${rootmnt}"; then
            zram_log "WARNING: First mount attempt failed, trying fallback 1..."
            
            if ! mount ${roflag} -t "${FSTYPE}" -o "rw,noatime" "${ROOT}" "${rootmnt}"; then
                zram_log "WARNING: Second mount attempt failed, trying fallback 2..."
                
                if ! mount ${roflag} -t "${FSTYPE}" "${ROOT}" "${rootmnt}"; then
                    zram_log "ERROR: All mount attempts failed"
                    panic "Failed to mount ZRAM root ${ROOT}!"
                else
                    zram_log "Third mount attempt succeeded"
                fi
            else
                zram_log "Second mount attempt succeeded"
            fi
        else
            zram_log "First mount attempt succeeded"
        fi
        
        # Verify mount worked
        if ! mountpoint -q "${rootmnt}"; then
            zram_log "ERROR: Mount verification failed, ${rootmnt} is not a mountpoint"
            panic "ZRAM root mount verification failed!"
        fi
        
        # Mount was successful!
        zram_log "ZRAM root mounted successfully!"
        
        # Create directories needed in the ZRAM root
        for dir in dev proc sys run tmp; do
            if [ ! -d "${rootmnt}/${dir}" ]; then
                zram_log "Creating required directory: ${rootmnt}/${dir}"
                mkdir -p "${rootmnt}/${dir}"
                chmod 755 "${rootmnt}/${dir}"
            fi
        done
        
        # FIXED: Add safe_sync before proceeding
        zram_log "Syncing ZRAM filesystem before continuing..."
        if ! safe_sync 3 "ZRAM root filesystem"; then
            zram_log "WARNING: ZRAM sync timed out, but continuing anyway"
        fi
        
        zram_log "ZRAM root mount process completed successfully"
        log_end_msg 0

    else
        # Standard root mounting logic (as in original script)
        log_begin_msg "No zramroot parameter detected, proceeding with standard mount"

		if [ -z "${ROOT}" ]; then
			panic "No root device specified. Boot arguments must include a root= parameter."
		fi

		# Setup the physical root device (wait, resolve UUIDs, etc.)
		local_device_setup "${ROOT}" "root file system"
		ROOT="${DEV}" # Update ROOT with the resolved device path

		# Get the root filesystem type if not set
		if [ -z "${ROOTFSTYPE}" ] || [ "${ROOTFSTYPE}" = auto ]; then
			FSTYPE=$(get_fstype "${ROOT}")
		else
			FSTYPE=${ROOTFSTYPE}
		fi

		# Run premount scripts (e.g., cryptsetup, LVM)
		local_premount

		# Set read-only/read-write flag
		if [ "${readonly?}" = "y" ] && [ -z "$LOOP" ]; then
			roflag=-r
		else
			roflag=-w
		fi

		# Check the filesystem if necessary
		checkfs "${ROOT}" root "${FSTYPE}"

		# Mount standard root
		# shellcheck disable=SC2086 # We want word splitting for ROOTFLAGS
		mount ${roflag} ${FSTYPE:+-t "${FSTYPE}"} ${ROOTFLAGS} "${ROOT}" "${rootmnt?}"
		mountroot_status="$?"

		# Handle LOOP device mounting if specified (usually for ISO booting)
		if [ "$LOOP" ]; then
			if [ "$mountroot_status" != 0 ]; then
				# Original error handling for loop mount failure
				if [ "${FSTYPE}" = ntfs ] || [ "${FSTYPE}" = vfat ]; then
					panic "Could not mount the partition ${ROOT} for loop setup. (filesystem = ${FSTYPE}, error code = $mountroot_status)"
				else
				    panic "Failed to mount ${ROOT} for loop setup (error code = $mountroot_status)"
				fi
			fi

			mkdir -p /host
			mount -o move "$rootmnt" /host

			while [ ! -e "/host/${LOOP#/}" ]; do
				panic "ALERT! Loop file /host/${LOOP#/} does not exist. Dropping to a shell!"
			done

			# Get the loop filesystem type if not set
			# shellcheck disable=SC2153
			LOOP_FSTYPE="$LOOPFSTYPE"
			if [ -z "$LOOP_FSTYPE" ] || [ "$LOOP_FSTYPE" = "unknown" ]; then
				LOOP_FSTYPE=$(/sbin/blkid -s TYPE -o value "/host/${LOOP#/}")
				[ -z "$LOOP_FSTYPE" ] && LOOP_FSTYPE="unknown"
			fi

			if [ "$readonly" = y ]; then
				loop_roflag=-r
			else
				loop_roflag=-w
			fi

			modprobe loop || panic "Failed to load loop module"

			# shellcheck disable=SC2086 # We want word splitting for LOOPFLAGS
			if ! mount ${loop_roflag} -o loop -t ${LOOP_FSTYPE} ${LOOPFLAGS} "/host/${LOOP#/}" "${rootmnt?}"; then
			    panic "Failed to mount loop device ${LOOP} (Type: ${LOOP_FSTYPE})"
			fi

			if [ -d "$rootmnt/host" ]; then
				mount -o move /host "$rootmnt/host"
			fi
		elif [ "$mountroot_status" != 0 ]; then
		    # Handle mount failure for non-loop devices
			panic "Failed to mount standard root device ${ROOT} (Type: ${FSTYPE}, error code = $mountroot_status)"
		fi
		
		# FIXED: Add safe_sync for standard mounts too
		if ! safe_sync 3 "standard root filesystem"; then
		    log_warn "Standard root sync timed out, but continuing anyway"
		fi
		
		log_end_msg 0
	fi
}

local_mount_fs()
{
	read_fstab_entry "$1"

	local_device_setup "$MNT_FSNAME" "$1 file system"
	MNT_FSNAME="${DEV}"

	local_premount

	if [ "${readonly}" = "y" ]; then
		roflag=-r
	else
		roflag=-w
	fi

	if [ "$MNT_PASS" != 0 ]; then
		checkfs "$MNT_FSNAME" "$MNT_DIR" "${MNT_TYPE}"
	fi

	# Mount filesystem
	if ! mount ${roflag} -t "${MNT_TYPE}" -o "${MNT_OPTS}" "$MNT_FSNAME" "${rootmnt}${MNT_DIR}"; then
		panic "Failed to mount ${MNT_FSNAME} as $MNT_DIR file system."
	fi
}

mountroot()
{
	local_mount_root
}

mount_top()
{
	# Note, also called directly in case it's overridden.
	local_top
}

mount_premount()
{
	# Note, also called directly in case it's overridden.
	local_premount
}

mount_bottom()
{
	# Note, also called directly in case it's overridden.
	local_bottom
}
