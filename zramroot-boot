#!/bin/busybox sh
# initramfs-zramroot-boot

# --- Global Variables ---
CONFIG_FILE="/conf/zramroot-config" 
DEBUG_MODE="no" # Will be loaded from config
REAL_ROOT_DEVICE="" # Will be set from ROOT environment variable
REAL_ROOT_MNT="/mnt/real_root_rw"  # For persistent logging and copying
DATE_TIME=$(date '+%m-%d-%H%M' 2>/dev/null || echo "unknown") # Generate log filename with date/time
REAL_ROOT_LOG_DIR="${REAL_ROOT_MNT}/var/log"
REAL_ROOT_LOG_FILE="${REAL_ROOT_LOG_DIR}/zramroot-${DATE_TIME}.log"
ZRAM_DEVICE="zram0"
TRIGGER_PARAMETER="zramroot" # Default trigger word
WAIT_TIMEOUT=5 # Seconds to wait for the real root device
ZRAM_DEVICE_NUM=0
ZRAM_SIZE_MiB=0
ZRAM_ALGO="lz4"
ZRAM_FS_TYPE="ext4"
ZRAM_MOUNT_OPTS="rw,noatime"
RAM_MIN_FREE_MiB=512   # Minimum RAM to leave free after ZRAM allocation
ZRAM_MIN_FREE_MiB=256   # Minimum ZRAM to leave free for growth
RAM_PREF_FREE_MiB=512  # Preferred RAM to leave free
ZRAM_MAX_FREE_MiB=35840  # Maximum ZRAM to leave free for growth
ESTIMATED_COMPRESSION_RATIO=2.5
ZRAM_BUFFER_PERCENT=10
BOOT_ID=$(cat /proc/sys/kernel/random/uuid 2>/dev/null || echo "unknown")
ZRAM_TEMP_MNT="/tmp/zram_temp" # Use a temporary mount point in /tmp

# --- Progress Bar Functions ---
# Terminal control sequences
ESC='\033'
CLEAR_LINE="${ESC}[2K\r"
MOVE_UP="${ESC}[1A"
GREEN="${ESC}[0;32m"
YELLOW="${ESC}[1;33m"
BLUE="${ESC}[0;34m"
NC="${ESC}[0m" # No Color

# Function to draw progress bar
draw_progress_bar() {
    local percentage=$1
    local bar_width=40
    local filled=$((percentage * bar_width / 100))
    local empty=$((bar_width - filled))
    
    # Create the bar
    local bar_filled=""
    local bar_empty=""
    local i=0
    
    # Fill the completed portion
    while [ $i -lt $filled ]; do
        bar_filled="${bar_filled}█"
        i=$((i + 1))
    done
    
    # Add the empty portion
    i=0
    while [ $i -lt $empty ]; do
        bar_empty="${bar_empty}░"
        i=$((i + 1))
    done
    
    # Display the progress bar
    printf "${CLEAR_LINE}${BLUE}[${GREEN}${bar_filled}${YELLOW}${bar_empty}${BLUE}] ${GREEN}%3d%%${NC} Copying to ZRAM..." "$percentage"
}

# Function to copy with progress monitoring
copy_with_progress() {
    local source="$1"
    local dest="$2"
    
    # Get total size to copy (in KB)
    local total_kb=$(du -sk "$source" | awk '{print $1}')
    log_debug "Total size to copy: ${total_kb} KB"
    
    # Create named pipe for rsync progress
    local pipe="/tmp/rsync_progress.$"
    mkfifo "$pipe" 2>/dev/null || {
        log_error "Failed to create progress pipe"
        return 1
    }
    
    # Start rsync in background with progress
    RSYNC_EXCLUDE="--exclude=/dev/* --exclude=/proc/* --exclude=/sys/* --exclude=/tmp/* --exclude=/run/* --exclude=/mnt/* --exclude=/media/* --exclude=/lost+found --exclude=/var/log/journal/*"
    
    # Use rsync with --info=progress2 for machine-readable progress
    rsync -ax --delete --info=progress2 ${RSYNC_EXCLUDE} "${source}/" "${dest}/" > "$pipe" 2>&1 &
    local rsync_pid=$!
    
    # Monitor progress
    local last_percentage=0
    
    # Add several blank lines to push the progress bar up and make it more visible
    echo ""
    echo ""
    echo ""
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "                        Copying filesystem to ZRAM"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    
    # Display initial progress bar at 0%
    draw_progress_bar 0
    
    while kill -0 $rsync_pid 2>/dev/null; do
        if read line < "$pipe"; then
            # Parse rsync progress output
            # Look for lines with format: "1,234,567,890  45%  1.23MB/s  0:00:12"
            if echo "$line" | grep -q "%"; then
                # Extract percentage
                local current_percentage=$(echo "$line" | grep -oE '[0-9]+%' | tr -d '%' | head -1)
                
                if [ -n "$current_percentage" ] && [ "$current_percentage" -ne "$last_percentage" ]; then
                    # Move cursor up to overwrite the previous progress bar
                    printf "${MOVE_UP}"
                    draw_progress_bar "$current_percentage"
                    last_percentage=$current_percentage
                fi
            fi
        fi
        sleep 0.1
    done
    
    # Wait for rsync to complete and get exit status
    wait $rsync_pid
    local rsync_exit=$?
    
    # Clean up pipe
    rm -f "$pipe"
    
    # Final progress bar at 100%
    printf "${MOVE_UP}"
    draw_progress_bar 100
    echo ""  # New line after progress bar
    echo ""
    
    return $rsync_exit
}

# --- Logging Functions ---
log_kernel() { 
    echo "zramroot: $@" > /dev/kmsg 2>/dev/null || true
}

log_debug() {
    if [ "${DEBUG_MODE}" = "yes" ]; then
        log_kernel "DEBUG: $@"
    fi
}

log_error() {
    log_kernel "ERROR: $@"
}

# Check if zramroot parameter is in cmdline before doing anything
log_kernel "Checking for zramroot parameter in kernel cmdline"
if ! echo " $(cat /proc/cmdline) " | grep -q "[[:space:]]zramroot[[:space:]]"; then
    log_debug "No zramroot parameter found - exiting quietly"
    exit 0
fi

log_kernel "zramroot parameter found - starting setup"

# Create necessary directories
mkdir -p /mnt
mkdir -p /tmp
mkdir -p "${ZRAM_TEMP_MNT}"

# Try to mount physical root for logging (don't fail if this doesn't work)
REAL_ROOT_DEVICE="${ROOT}"
if [ -n "${REAL_ROOT_DEVICE}" ]; then
    log_debug "Attempting to mount physical root ${REAL_ROOT_DEVICE} for logging"
    mkdir -p "${REAL_ROOT_MNT}"
    
    # Try to find the real device
    real_dev=""
    if command -v blkid >/dev/null 2>&1; then
        real_dev=$(blkid -l -t "${REAL_ROOT_DEVICE}" -o device 2>/dev/null)
    fi
    
    if [ -z "$real_dev" ] && [ "${REAL_ROOT_DEVICE#/dev/}" != "${REAL_ROOT_DEVICE}" ] && [ -b "${REAL_ROOT_DEVICE}" ]; then
        real_dev="${REAL_ROOT_DEVICE}"
    fi
    
    if [ -n "$real_dev" ] && [ -b "$real_dev" ]; then
        if mount -o rw "$real_dev" "${REAL_ROOT_MNT}" 2>/dev/null; then
            mkdir -p "${REAL_ROOT_LOG_DIR}"
            log_debug "Physical root mounted for logging at ${REAL_ROOT_MNT}"
        fi
    fi
fi

# Load configuration
DEBUG_MODE="no"; ZRAM_SIZE_MiB=0; ZRAM_ALGO="zstd"; ZRAM_FS_TYPE="ext4"
ZRAM_MOUNT_OPTS="defaults,noatime"; RAM_MIN_FREE_MiB=512
ZRAM_BUFFER_PERCENT=10
ZRAM_DEVICE_NUM=0; TRIGGER_PARAMETER="zramroot"; WAIT_TIMEOUT=5
RAM_PREF_FREE_MiB=1024; ZRAM_MIN_FREE_MiB=256; ZRAM_MAX_FREE_MiB=35840

if [ -f "${CONFIG_FILE}" ]; then
    log_debug "Loading configuration from ${CONFIG_FILE}"
    . "${CONFIG_FILE}"
fi

# Set algorithm-specific compression estimates based on empirical testing
# These are not user-configurable as ZRAM doesn't allow tuning compression levels
case "${ZRAM_ALGO}" in
    "zstd")
        ESTIMATED_COMPRESSION_RATIO=3.0  # Conservative estimate for zstd
        ;;
    "lz4hc")
        ESTIMATED_COMPRESSION_RATIO=2.5  # Better compression than lz4
        ;;
    "lz4")
        ESTIMATED_COMPRESSION_RATIO=2.0  # Fast but moderate compression
        ;;
    "lzo"|"lzo-rle")
        ESTIMATED_COMPRESSION_RATIO=1.8  # Fastest, but least compression
        ;;
    *)
        ESTIMATED_COMPRESSION_RATIO=2.2  # Safe default for unknown algorithms
        ;;
esac

log_debug "Using compression ratio estimate of ${ESTIMATED_COMPRESSION_RATIO} for algorithm ${ZRAM_ALGO}"

ZRAM_DEVICE="/dev/zram${ZRAM_DEVICE_NUM}"

log_kernel "=== STARTING ZRAM ROOT SETUP PROCESS ==="

# Check available RAM
AVAILABLE_RAM_KB=$(grep MemAvailable /proc/meminfo | awk '{print $2}')
if [ -z "$AVAILABLE_RAM_KB" ]; then
    AVAILABLE_RAM_KB=$(grep MemFree /proc/meminfo | awk '{print $2}')
fi

if ! echo "$AVAILABLE_RAM_KB" | grep -q '^[0-9]\+$'; then
    log_error "Cannot determine available RAM. Cannot proceed."
    exit 1
fi

AVAILABLE_RAM_MiB=$((AVAILABLE_RAM_KB / 1024))
log_debug "Available RAM: ${AVAILABLE_RAM_MiB} MiB"

# Calculate used size of physical root
if [ -d "${REAL_ROOT_MNT}" ] && mountpoint -q "${REAL_ROOT_MNT}"; then
    ROOT_USED_KB=$(LC_ALL=POSIX df -k "${REAL_ROOT_MNT}" | awk 'NR==2 {print $3}')
    if ! echo "$ROOT_USED_KB" | grep -q '^[0-9]\+$'; then
        log_error "Could not determine used disk space on ${REAL_ROOT_MNT}."
        exit 1
    fi
    ROOT_USED_MiB=$((ROOT_USED_KB / 1024))
else
    # Fallback: estimate 4GB if we can't mount physical root
    ROOT_USED_MiB=4096
    log_debug "Could not mount physical root, estimating 4GB"
fi

log_kernel "Used size on physical root: ${ROOT_USED_MiB} MiB"

# Add buffer to root usage
BUFFER_MiB=$(awk -v u="$ROOT_USED_MiB" -v p="$ZRAM_BUFFER_PERCENT" 'BEGIN{printf "%.0f", u * p / 100}')
ROOT_WITH_BUFFER_MiB=$((ROOT_USED_MiB + BUFFER_MiB))

# Calculate expected compressed size using compression ratio
# This is the key fix: we need to account for compression when sizing ZRAM
EXPECTED_COMPRESSED_ROOT_MiB=$(awk -v r="$ROOT_WITH_BUFFER_MiB" -v c="$ESTIMATED_COMPRESSION_RATIO" 'BEGIN{printf "%.0f", r / c}')
log_kernel "Expected compressed size: ${EXPECTED_COMPRESSED_ROOT_MiB} MiB (ratio: ${ESTIMATED_COMPRESSION_RATIO})"

# Determine ZRAM size
if [ "$ZRAM_SIZE_MiB" -gt 0 ]; then
    FINAL_ZRAM_SIZE_MiB=$ZRAM_SIZE_MiB
    log_kernel "Using configured ZRAM size: ${FINAL_ZRAM_SIZE_MiB} MiB"
else
    # Calculate dynamically based on compressed size
    if [ $((AVAILABLE_RAM_MiB - RAM_MIN_FREE_MiB - EXPECTED_COMPRESSED_ROOT_MiB - ZRAM_MIN_FREE_MiB)) -le 0 ]; then
        log_error "Insufficient RAM: Available ${AVAILABLE_RAM_MiB} MiB < Needed $((RAM_MIN_FREE_MiB + EXPECTED_COMPRESSED_ROOT_MiB + ZRAM_MIN_FREE_MiB)) MiB."
        exit 1
    fi
    
    if [ $((AVAILABLE_RAM_MiB - RAM_PREF_FREE_MiB - EXPECTED_COMPRESSED_ROOT_MiB - ZRAM_MIN_FREE_MiB)) -le 0 ]; then
        FINAL_ZRAM_SIZE_MiB=$((EXPECTED_COMPRESSED_ROOT_MiB + ZRAM_MIN_FREE_MiB))
        log_kernel "RAM is tight: Using minimum ZRAM size: ${FINAL_ZRAM_SIZE_MiB} MiB"
    elif [ $((AVAILABLE_RAM_MiB - RAM_PREF_FREE_MiB - EXPECTED_COMPRESSED_ROOT_MiB - ZRAM_MAX_FREE_MiB)) -le 0 ]; then
        EXTRA_ZRAM=$((AVAILABLE_RAM_MiB - RAM_PREF_FREE_MiB - EXPECTED_COMPRESSED_ROOT_MiB))
        FINAL_ZRAM_SIZE_MiB=$((EXPECTED_COMPRESSED_ROOT_MiB + EXTRA_ZRAM))
        log_kernel "Medium RAM availability: Using ${FINAL_ZRAM_SIZE_MiB} MiB for ZRAM"
    else
        FINAL_ZRAM_SIZE_MiB=$((EXPECTED_COMPRESSED_ROOT_MiB + ZRAM_MAX_FREE_MiB))
        log_kernel "Plenty of RAM: Using maximum ZRAM size: ${FINAL_ZRAM_SIZE_MiB} MiB"
    fi
    
    # Additional safety check: ensure ZRAM size is reasonable
    # ZRAM size should be at least the compressed size or we risk running out of space
    MIN_SAFE_ZRAM=$((EXPECTED_COMPRESSED_ROOT_MiB + (EXPECTED_COMPRESSED_ROOT_MiB / 4)))  # Add 25% safety margin
    if [ "$FINAL_ZRAM_SIZE_MiB" -lt "$MIN_SAFE_ZRAM" ]; then
        log_kernel "Adjusting ZRAM size to safe minimum: ${MIN_SAFE_ZRAM} MiB (was ${FINAL_ZRAM_SIZE_MiB} MiB)"
        FINAL_ZRAM_SIZE_MiB=$MIN_SAFE_ZRAM
    fi
fi

# Load zram module if not already loaded
if ! lsmod | grep -q '^zram '; then
    log_debug "Loading zram kernel module..."
    modprobe zram || {
        log_error "Failed to load zram kernel module!"
        exit 1
    }
fi

# Wait for ZRAM device node to appear
sleep 3
if command -v udevadm >/dev/null && [ -x "$(command -v udevadm)" ]; then
    udevadm settle || log_debug "udev settle failed or not available"
fi

# Check if ZRAM device exists, if not create/configure it
if [ ! -b "${ZRAM_DEVICE}" ]; then
    # Try using zramctl if available
    if command -v zramctl >/dev/null; then
        log_debug "Using zramctl to create ZRAM device..."
        if zramctl --find --size "${FINAL_ZRAM_SIZE_MiB}M" --algorithm "${ZRAM_ALGO}" >/dev/null 2>&1; then
            ZRAM_DEVICE=$(zramctl --output NAME --noheadings | head -1)
            log_debug "Created ZRAM device: ${ZRAM_DEVICE}"
        else
            log_debug "zramctl failed, trying manual approach..."
            # Fall back to manual configuration
            echo "${ZRAM_ALGO}" > /sys/class/block/zram${ZRAM_DEVICE_NUM}/comp_algorithm 2>/dev/null || true
            echo "${FINAL_ZRAM_SIZE_MiB}M" > /sys/class/block/zram${ZRAM_DEVICE_NUM}/disksize 2>/dev/null
        fi
    else
        # No zramctl, try manual configuration
        log_debug "zramctl not available, using manual configuration..."
        echo "${ZRAM_ALGO}" > /sys/class/block/zram${ZRAM_DEVICE_NUM}/comp_algorithm 2>/dev/null || true
        echo "${FINAL_ZRAM_SIZE_MiB}M" > /sys/class/block/zram${ZRAM_DEVICE_NUM}/disksize 2>/dev/null
    fi
else
    # Device exists, check if it's configured
    if [ -f "/sys/class/block/zram${ZRAM_DEVICE_NUM}/disksize" ]; then
        current_size=$(cat /sys/class/block/zram${ZRAM_DEVICE_NUM}/disksize 2>/dev/null || echo "0")
        if [ "$current_size" = "0" ]; then
            log_debug "ZRAM device exists but not configured, configuring now..."
            echo "${ZRAM_ALGO}" > /sys/class/block/zram${ZRAM_DEVICE_NUM}/comp_algorithm 2>/dev/null || true
            echo "${FINAL_ZRAM_SIZE_MiB}M" > /sys/class/block/zram${ZRAM_DEVICE_NUM}/disksize 2>/dev/null
        else
            log_debug "ZRAM device already configured"
        fi
    fi
fi

# Wait a bit more for device to be ready
sleep 2

# Verify ZRAM device exists
if [ ! -b "${ZRAM_DEVICE}" ]; then
    log_error "ZRAM device does not exist after configuration!"
    exit 1
fi

log_debug "ZRAM device configured successfully"

# Format ZRAM filesystem
log_kernel "Formatting ZRAM device with ${ZRAM_FS_TYPE} filesystem..."
mkfs_cmd="mkfs.${ZRAM_FS_TYPE}"
mkfs_opts=""

if ! command -v ${mkfs_cmd} >/dev/null; then
    log_error "Filesystem utility ${mkfs_cmd} not found in initramfs!"
    exit 1
fi

# Add specific options for filesystem types
if [ "$ZRAM_FS_TYPE" = "ext4" ]; then 
    mkfs_opts="-F"
elif [ "$ZRAM_FS_TYPE" = "btrfs" ]; then
    mkfs_opts="-f"
fi

if ${mkfs_cmd} ${mkfs_opts} "${ZRAM_DEVICE}" >/dev/null 2>&1; then
    log_kernel "ZRAM device formatted successfully"
else
    log_error "Failed to format ZRAM device!"
    exit 1
fi

# Now mount ZRAM temporarily and copy files
mkdir -p "${ZRAM_TEMP_MNT}"
if mount -t "${ZRAM_FS_TYPE}" -o "rw,${ZRAM_MOUNT_OPTS}" "${ZRAM_DEVICE}" "${ZRAM_TEMP_MNT}"; then
    log_debug "ZRAM device mounted at ${ZRAM_TEMP_MNT}"
    
    # Copy filesystem from physical root to ZRAM ONLY if we successfully mounted physical root
    if [ -d "${REAL_ROOT_MNT}" ] && mountpoint -q "${REAL_ROOT_MNT}"; then
        log_kernel "Copying root filesystem from ${REAL_ROOT_MNT} to ZRAM..."
        
        # Use the copy function with progress bar
        if copy_with_progress "${REAL_ROOT_MNT}" "${ZRAM_TEMP_MNT}"; then
            log_kernel "Filesystem copy completed successfully"
            
            # Create required directories in ZRAM root
            for dir in dev proc sys run tmp; do
                mkdir -p "${ZRAM_TEMP_MNT}/${dir}"
                chmod 755 "${ZRAM_TEMP_MNT}/${dir}"
            done
            
            # Modify /etc/fstab in ZRAM root
            if [ -f "${ZRAM_TEMP_MNT}/etc/fstab" ]; then
                log_debug "Backing up and modifying /etc/fstab in ZRAM root"
                cp "${ZRAM_TEMP_MNT}/etc/fstab" "${ZRAM_TEMP_MNT}/etc/fstab.zram_backup"
                
                # Create a temporary file for sed operations to avoid in-place editing issues
                temp_fstab="/tmp/fstab_temp.$"
                
                # Comment out root filesystem entry
                sed 's|^\([^#].*[[:space:]]/[[:space:]].*\)$|# ZRAMROOT: \1|g' "${ZRAM_TEMP_MNT}/etc/fstab" > "$temp_fstab"
                
                # Comment out other mount points we want to disable in ZRAM
                sed 's|^\([^#].*[[:space:]]/boot[[:space:]].*\)$|# ZRAMROOT: \1|g' "$temp_fstab" > "$temp_fstab.2"
                sed 's|^\([^#].*[[:space:]]/boot/efi[[:space:]].*\)$|# ZRAMROOT: \1|g' "$temp_fstab.2" > "$temp_fstab.3"
                sed 's|^\([^#].*[[:space:]]/home[[:space:]].*\)$|# ZRAMROOT: \1|g' "$temp_fstab.3" > "$temp_fstab.4"
                sed 's|^\([^#].*[[:space:]]/var[[:space:]].*\)$|# ZRAMROOT: \1|g' "$temp_fstab.4" > "$temp_fstab.5"
                
                # Copy the final result back
                cp "$temp_fstab.5" "${ZRAM_TEMP_MNT}/etc/fstab"
                
                # Clean up temporary files
                rm -f "$temp_fstab" "$temp_fstab.2" "$temp_fstab.3" "$temp_fstab.4" "$temp_fstab.5"
                
                log_debug "Successfully modified /etc/fstab"
            fi
        else
            log_error "Rsync failed to copy files from physical root to ZRAM!"
            exit 1
        fi
    else
        log_debug "Physical root not mounted, assuming ZRAM already has filesystem"
    fi
    
    # Sync and unmount
    sync
    sleep 1
    umount "${ZRAM_TEMP_MNT}" || {
        log_error "Failed to unmount ZRAM root!"
        exit 1
    }
    log_debug "ZRAM root unmounted successfully"
else
    log_error "Failed to mount ZRAM device for file copy!"
    exit 1
fi

# Calculate final mount options
final_mount_opts=$(echo "${ZRAM_MOUNT_OPTS},rw" | sed 's/,defaults//g; s/,ro//g; s/,rw,rw/,rw/g; s/^,\|,$//g')
[ -z "$final_mount_opts" ] && final_mount_opts="rw"

# Export ZRAM variables for use by the local script
log_kernel "Setting ZRAMROOT Variables..."
export ZRAMROOT_DEVICE="${ZRAM_DEVICE}"
export ZRAMROOT_FSTYPE="${ZRAM_FS_TYPE}"
export ZRAMROOT_ROOTFLAGS="${final_mount_opts}"

mkdir -p /conf
echo "ZRAMROOT_DEVICE=${ZRAM_DEVICE}" > /conf/zramroot_vars
echo "ZRAMROOT_FSTYPE=${ZRAM_FS_TYPE}" >> /conf/zramroot_vars
echo "ZRAMROOT_ROOTFLAGS=${final_mount_opts}" >> /conf/zramroot_vars
chmod 644 /conf/zramroot_vars

# Also write to tmp as backup
echo "ZRAMROOT_DEVICE=${ZRAM_DEVICE}" > /tmp/zramroot_vars
echo "ZRAMROOT_FSTYPE=${ZRAM_FS_TYPE}" >> /tmp/zramroot_vars
echo "ZRAMROOT_ROOTFLAGS=${final_mount_opts}" >> /tmp/zramroot_vars

log_kernel "ZRAMROOT_DEVICE=${ZRAM_DEVICE}"
log_kernel "ZRAMROOT_FSTYPE=${ZRAM_FS_TYPE}"
log_kernel "ZRAMROOT_ROOTFLAGS=${final_mount_opts}"

# Cleanup physical root mount if we mounted it
if [ -d "${REAL_ROOT_MNT}" ] && mountpoint -q "${REAL_ROOT_MNT}"; then
    log_debug "Unmounting physical root"
    sync
    umount "${REAL_ROOT_MNT}" || umount -l "${REAL_ROOT_MNT}" || true
fi

log_kernel "===== ZRAM ROOT PREPARATION SCRIPT FINISHED SUCCESSFULLY ====="
exit 0
